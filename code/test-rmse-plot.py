import pathlib
import subprocess
import datetime
import math

from matplotlib import pyplot as plt
import labellines
import polars as pl

# reset matplotlib
plt.close('all')
plt.rcdefaults()

# config
single_figure = True
cycler = plt.cycler(
    color=['#006BA4', '#FF800E', '#ABABAB', '#595959'], # from style tableau-colorblind10
    linestyle=['-', '--', '-.', ':'],
    marker=['o', 's', '^', 'D'],
)

# data printed by test-rmse.py
results = [
    {
        'package': 'bartz',
        'n/ntree': 8,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'rmse': [1.0359247922897339, 1.0659706592559814, 1.1089340448379517, 1.2832071781158447, 1.2691594362258911, 1.4937708377838135, 1.2889878749847412, 1.3639646768569946, 1.2932759523391724, 1.3130755424499512, 1.2509796619415283, 1.2689456939697266], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547]},
    },
    {
        'package': 'BART',
        'n/ntree': 8,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'rmse': [1.0360723733901978, 1.064391016960144, 1.1109455823898315, 1.265666127204895, 1.2567461729049683, 1.3348126411437988, 1.2638499736785889, 1.3109911680221558, 1.3439698219299316, 1.2819788455963135, 1.292351484298706, 1.2791907787322998], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547]},
    },
    {
        'package': 'dbarts',
        'n/ntree': 8,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'rmse': [1.0489023923873901, 1.0670474767684937, 1.1035990715026855, 1.261137843132019, 1.260778546333313, 1.3608323335647583, 1.2670263051986694, 1.3316148519515991, 1.2882664203643799, 1.2603123188018799, 1.2446308135986328, 1.2937710285186768], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547]},
    },
    {
        'package': 'bartMachine',
        'n/ntree': 8,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'rmse': [1.0516172647476196, 1.1389721632003784, 1.0983777046203613, 1.2935161590576172, 1.249812364578247, 1.402327537536621, 1.2941207885742188, 1.2765204906463623, 1.2824753522872925, 1.2805408239364624, 1.2699029445648193, 1.2702020406723022], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547]},
    },

    {
        'package': 'bartz',
        'ntree': 200,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591, 2.5669288635253906, 2.7809667587280273, 3.1326067447662354], 'rmse': [1.8639681339263916, 1.758780598640442, 1.7596269845962524, 1.6074494123458862, 1.5978736877441406, 1.459171175956726, 1.3328497409820557, 1.2504764795303345, 1.2256035804748535, 1.213181734085083, 1.1573951244354248, 1.106981873512268, 1.0662840604782104, 1.086978554725647, 1.0982307195663452]},
    },
    {
        'package': 'BART',
        'ntree': 200,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591, 2.5669288635253906, 2.7809667587280273, 3.1326067447662354], 'rmse': [1.8638052940368652, 1.755556344985962, 1.755607008934021, 1.619517207145691, 1.5937870740890503, 1.4775590896606445, 1.3360036611557007, 1.3171778917312622, 1.2694783210754395, 1.2238662242889404, 1.1447633504867554, 1.1104735136032104, 1.0636088848114014, 1.0938106775283813, 1.1021674871444702]},
    },
    {
        'package': 'dbarts',
        'ntree': 200,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591, 2.5669288635253906, 2.7809667587280273, 3.1326067447662354], 'rmse': [1.8485147953033447, 1.7963286638259888, 1.7405145168304443, 1.6110947132110596, 1.599934458732605, 1.4503579139709473, 1.325714349746704, 1.221240520477295, 1.2444721460342407, 1.2100298404693604, 1.1409915685653687, 1.118575930595398, 1.0730026960372925, 1.086519718170166, 1.1232714653015137]},
    },
    {
        'package': 'bartMachine',
        'ntree': 200,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591, 2.5669288635253906, 2.7809667587280273, 3.1326067447662354], 'rmse': [1.8520705699920654, 1.8059433698654175, 1.7259646654129028, 1.623396396636963, 1.5958353281021118, 1.4635478258132935, 1.312511920928955, 1.2595610618591309, 1.230337381362915, 1.1933668851852417, 1.15595543384552, 1.101415753364563, 1.0579168796539307, 1.078376293182373, 1.081756830215454]},
    },

    {
        'package': 'bartz',
        'n/ntree': 8,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591], 'rmse': [1.8616821765899658, 1.7548161745071411, 1.9618793725967407, 2.06900691986084, 1.6624161005020142, 1.8236260414123535, 1.560827612876892, 1.3877909183502197, 1.2444978952407837, 1.1754443645477295, 1.1238502264022827, 1.0658024549484253]},
    },
    {
        'package': 'BART',
        'n/ntree': 8,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591], 'rmse': [1.8620895147323608, 1.756630778312683, 1.7613940238952637, 1.7574763298034668, 1.7281712293624878, 1.8126013278961182, 1.614025354385376, 1.4283307790756226, 1.2919950485229492, 1.1925677061080933, 1.1257317066192627, 1.0674798488616943]},
    },
    {
        'package': 'dbarts',
        'n/ntree': 8,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591], 'rmse': [1.8513649702072144, 2.6778995990753174, 1.7281299829483032, 2.062478542327881, 1.6594444513320923, 1.8152040243148804, 1.5675050020217896, 1.3738280534744263, 1.2596467733383179, 1.1790980100631714, 1.1121578216552734, 1.0733528137207031]},
    },
    {
        'package': 'bartMachine',
        'n/ntree': 8,
        'p': 100,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], 'total_var': [3.334458112716675, 2.9551658630371094, 2.9158132076263428, 2.672942876815796, 2.87026309967041, 3.1431937217712402, 3.1866049766540527, 3.0871899127960205, 3.5316991806030273, 3.5436856746673584, 3.026345729827881, 3.312030076980591], 'rmse': [1.848631739616394, 2.0520825386047363, 1.7384378910064697, 1.6869829893112183, 1.6626263856887817, 1.6420865058898926, 1.6103057861328125, 1.392305612564087, 1.295771598815918, 1.2060052156448364, 1.1156829595565796, 1.0759172439575195]},
    },

    {
        'package': 'bartz',
        'ntree': 200,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], 'rmse': [1.035566806793213, 1.0685011148452759, 1.1145836114883423, 1.2246898412704468, 1.2244033813476562, 1.189188838005066, 1.2108478546142578, 1.191237449645996, 1.2458338737487793, 1.3120566606521606, 1.3433444499969482, 1.435227394104004, 1.5201014280319214, 1.559691309928894], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547, 2.932779312133789, 3.016296625137329]},
    },
    {
        'package': 'BART',
        'ntree': 200,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], 'rmse': [1.0359090566635132, 1.0680593252182007, 1.116106390953064, 1.2333317995071411, 1.2332143783569336, 1.1840764284133911, 1.2121760845184326, 1.2118200063705444, 1.2933295965194702, 1.3420746326446533, 1.3543362617492676, 1.4312297105789185, 1.503885269165039, 1.5720254182815552], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547, 2.932779312133789, 3.016296625137329]},
    },
    {
        'package': 'dbarts',
        'ntree': 200,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], 'rmse': [1.0470930337905884, 1.0993996858596802, 1.1042667627334595, 1.208539366722107, 1.220859408378601, 1.1886669397354126, 1.2217198610305786, 1.2002193927764893, 1.2661643028259277, 1.301872968673706, 1.3715696334838867, 1.434178352355957, 1.511329174041748, 1.5298235416412354], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547, 2.932779312133789, 3.016296625137329]},
    },
    {
        'package': 'bartMachine',
        'ntree': 200,
        'n/p': 10,
        'results': {'n': [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], 'rmse': [1.0488320589065552, 1.1552815437316895, 1.1049809455871582, 1.2300102710723877, 1.2232303619384766, 1.1839220523834229, 1.2249629497528076, 1.1989428997039795, 1.2632452249526978, 1.308231234550476, 1.373393177986145, 1.4190844297409058, 1.4990442991256714, 1.5349442958831787], 'total_var': [1.0664300918579102, 1.068573236465454, 1.058174967765808, 3.1788647174835205, 2.81088924407959, 3.430577278137207, 2.840972423553467, 3.2141757011413574, 3.190049648284912, 2.918858766555786, 2.9976675510406494, 2.9958934783935547, 2.932779312133789, 3.016296625137329]},
    },
]

# merge data into one long-format dataframe
tables = []
for things in results:
    tables.append(
        pl.DataFrame(things['results'])
        .with_columns([
            pl.lit(v).alias(k)
            for k, v in things.items()
            if k != 'results'
        ])
    )

df = (
    pl.concat(tables, how='diagonal')
    .filter(pl.col('n') >= 32)
)

keynames = ['n/ntree', 'ntree', 'n/p', 'p']
groups = list(df.group_by(keynames, maintain_order=True))

if single_figure:
    fig, axs = plt.subplots(2, 2,
        figsize=[8.5, 8.5],
        num=f'test-rmse-plot',
        clear=True,
        layout='constrained',
        sharex=True,
        sharey=True,
    )
    axs = axs.flat
    figs = [fig]
else:
    axs = []
    figs = []
    for i in range(len(groups)):
        fig, ax = plt.subplots(
            figsize=[4.5, 3.5],
            num=f'test-rmse-plot-{i}',
            clear=True,
            layout='constrained',
        )
        axs.append(ax)
        figs.append(fig)
axs[1], axs[3] = axs[3], axs[1]

for ax, (keys, group) in zip(axs, groups):
    
    ax.set_prop_cycle(cycler)
    for (package,), data in group.group_by(['package'], maintain_order=True):
        ax.plot(data['n'], data['rmse'], markerfacecolor='none', label=package)
    
    line_error, = ax.plot([data['n'].min(), data['n'].max()], [1, 1], '--k', label='error std')
    line_total, = ax.plot(data['n'], data['total_var'].sqrt(), '--k', label='total std')
    
    ax.set_xscale('log')
    ref_n = df['n'] if single_figure else data['n']
    ax.set_xlim(
        10 ** math.floor(math.log10(ref_n.min())),
        10 ** math.ceil(math.log10(ref_n.max())),
    )
    
    labellines.labelLines([line_error, line_total], drop_label=True, outline_width=6, align=False)

    ss = ax.get_subplotspec()
    legend_title = '\n'.join(
        f'{name}={value}'
        for name, value in zip(keynames, keys)
        if value is not None
    )
    legend_kw = dict(
        title=legend_title,
    )
    if single_figure:
        legend_kw.update(loc='upper left')
        if ss.is_first_row() and ss.is_first_col():
            ax.legend(**legend_kw)
        else:
            ax.legend([], [], **legend_kw)
    else:
        ax.legend(loc='best', **legend_kw)
    
    if ss.is_last_row():
        ax.set_xlabel('n')
    if ss.is_first_col():
        ax.set_ylabel('RMSE')
    ax.grid(linestyle='--')
    ax.grid(which='minor', linestyle=':')

if single_figure:
    axs[0].set_ylim(0.95, 1.95)

for fig in figs:
    fig.show()

# save figures
script = pathlib.Path(__file__)
outdir = script.with_suffix('')
outdir.mkdir(exist_ok=True)
timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%Hh%Mm%Ss')
commit = subprocess.check_output(['git', 'rev-parse', 'HEAD'], text=True).strip()[:7]
for fig in figs:
    figname = f'{commit}_{timestamp}_{fig.get_label()}.pdf'
    fig.savefig(outdir / figname)
